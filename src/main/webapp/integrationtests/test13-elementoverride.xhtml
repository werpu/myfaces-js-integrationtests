<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core">
<ui:composition template="../templates/template.xhtml">
    <ui:define name="content">
        <h1>element override</h1>

        <h2>form submit corner condition with the second component
            overriding the first via its name,
            this component tests a detachement sidebehavior
            where the first element is detached and a second one is created
            having a different id but the same name.

            This is the pattern dojo and some other ajax frameworks follow
            in their decoration behavior, note this test can fail
            because it is myfaces specific to cover this corner case.
            I therefore will not make a blocking fail in the testroutines.</h2>
        <h:form id="testForm">
            <h:panelGroup id="testGroup">
                <h:inputText id="myTest" value="#{myBean2.searchTerm}">
                    <f:ajax render="testGroup"/>
                </h:inputText>

                <script type="text/javascript">
                    var node = document.getElementById("testForm:myTest");
                    node.name = null;
                    var newNode = document.createElement("input");
                    newNode.name = node.id;
                    node.parentNode.appendChild(newNode);
                </script>
            </h:panelGroup>
        </h:form>


        <!-- test for no options set -->
        <h:form id="testForm2">
            <h:inputText id="myTest22" value="#{myBean2.searchTerm}" onblur="jsf.ajax.request(this, event);">
            </h:inputText>
        </h:form>
    </ui:define>
</ui:composition>
</html>