<!--

    Copyright (C) 2010 CREDIT SUISSE IT - <developmentsupport.jsf@credit-suisse.com>

    All Rights reserved.

    This software is the proprietary information of CREDIT SUISSE Technology and
    Operations. Use is subject to license and non-disclosure terms.

-->

<ui:composition xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://java.sun.com/jsf/facelets"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:c="http://java.sun.com/jstl/core"
    xmlns:cs="http://credit-suisse.com/csJsf"
    xmlns:composite="http://java.sun.com/jsf/composite">

<composite:interface componentType="com.csg.jsf.component.field.AutoComplete">
	<composite:attribute name="value" required="false"/>
	<composite:attribute name="var" required="false" default="item"/>
	<composite:attribute name="items" required="true" method-signature="java.util.List f(com.csg.jsf.component.field.AutoComplete)" />
	<composite:attribute name="valueChangeListener" required="false"
			method-signature="java.lang.String f(javax.faces.event.ValueChangeEvent)" default="null"/>
	<composite:attribute name="minQueryLength" required="false"  default="#{cc.attrs.autoCompleteStart}" shortDescription="Number of characters to be typed before starting to query."/>
    <composite:attribute name="autoCompleteStart" required="false" default="0" shortDescription="deprecated: use minQueryLength instead."/>
    <composite:attribute name="autoCompleteArrow" required="false" default="true"/>
	<composite:attribute name="fireFilterActionOnKeyEnter" required="false" default="false"/>
	<composite:attribute name="reRender" required="false"/>
	<composite:attribute name="limit" type="java.lang.Integer" required="false" shortDescription="restricts the amount of suggested entries from 0 index to the given limit"/>
	<composite:attribute name="size" required="false" default="20"/>
	<composite:attribute name="ignoreChars" required="false" default="/(\s)/"
			shortDescription="JS RegExp which defines for which chars no Ajax roundtrip should take place. Per default this is just a white space"/>
	<composite:attribute name="display" shortDescription="Input field's display mode (mutable|required|disabled|read-only)" required="false" default="mutable"  type="java.lang.String"/>
	<composite:attribute name="emptyFieldValueLabel" shortDescription="Label text which will be displayed as inut field's value as long as the user has not entered any text." required="false" default="null"  type="java.lang.String"/>
	<composite:attribute name="resultListMaxHeight" shortDescription="If the result list would take more space on screen than specified value (incl. unit), the list gets a scroll bar. Works only with IE8 and newer." required="false" default="300px"  type="java.lang.String"/>
	<composite:attribute name="resolveCcChildrenForGrid" default="false" shortDescription="If true and this CC is used within cs:panelGrid, cs:panelGrid will resolve direct CC body children as grid entries." required="false" type="boolean"/>
	<composite:attribute name="keyupDelay" shortDescription="Define delay timeout before hint request is sent." required="false" default="250"  type="java.lang.Integer"/>
	<composite:editableValueHolder name="autoCompleteInput" />
    <composite:facet name="suggestionListHeader" shortDescription="Displayed at the start of the suggestion list." />
    <composite:facet name="suggestionListFooter" shortDescription="Displayed at the end of the suggestion list." />

</composite:interface>

<composite:implementation>
	<div id="#{cc.clientId}" class="#{cs:skinNamespacePrefix()}autocomplete">
	
		<c:choose>
			<c:when test="#{cs:currentSkinName() eq 'csstandard20'}">
                <c:set var="resultContainerDivStyleClass" value="autocompleteResultsContainer"/>
				<c:set var="resultDivStyleClass" value="autocompleteResults"/>
				<c:set var="resultListStyleClass" value="resultList"/>
				<c:set var="fieldStyleClass" value="autocompleteField"/>
				<c:set var="entryHoverStyleClass" value="hoverRow"/>
				
				<h:panelGroup rendered="#{cc.attrs.display != 'read-only' and cc.attrs.display != 'disabled'}">
					<script type="text/javascript">//<![CDATA[
	jQuery(document).ready(function(){
		initAutocompleteElements('#{cc.clientId}');
	});//]]>
					</script>
					<div class="actionIcon">
						<cs:htmlElement element="span" 
							styleClass="#{cc.attrs.autoCompleteArrow ? 'arrow' : null}" />
					</div>
				</h:panelGroup>
			</c:when>
			<c:otherwise>
                <c:set var="resultContainerDivStyleClass" value="autoComplete autocompleteResultsContainer"/>
                <c:set var="resultDivStyleClass" value="autocompleteResults"/>
				<c:set var="resultListStyleClass" value="autoCompleteTable"/>
				<c:set var="fieldStyleClass" value="#{cc.attrs.autoCompleteArrow ? 'autoCompleteArrow' : null}"/>
				<c:set var="entryHoverStyleClass" value="hoverRowClass"/>
				
				<ui:remove>
					Dummy JS functions for backward compatibility
				</ui:remove>
				<script type="text/javascript">//<![CDATA[
	function resizeAutocompleteResultlist(){}
	//]]>
				</script>
			</c:otherwise>
		</c:choose>

		<h:inputText id="autoCompleteInput" value="#{cc.attrs.value}" autocomplete="off" size="#{cc.attrs.size}"
				valueChangeListener="#{cc.attrs.valueChangeListener}"
				styleClass="#{fieldStyleClass}"
				required="#{cc.attrs.display eq 'required'}"
				disabled="#{cc.attrs.display eq 'disabled'}"
				rendered="#{cc.attrs.display != 'read-only'}"/>
		<cs:field id="autoCompleteInputReadOnly" display="read-only" only="value" value="#{cc.attrs.value}" rendered="#{cc.attrs.display eq 'read-only'}"/>

        <cs:htmlElement element="div" id="autoCompleteDiv" styleClass="#{resultContainerDivStyleClass}"
                        style="display:none;background-color:#FFFFFF;">
            <f:event type="preRenderComponent" listener="#{cc.preRenderAutoCompletePopup}"/>
            <composite:renderFacet name="suggestionListHeader" />
            <cs:htmlElement element="div" id="autoCompleteBodyDiv"
                            style="max-height: #{cc.attrs.resultListMaxHeight}" styleClass="#{resultDivStyleClass}">

                <h:dataTable value="#{cc.autoCompleteItems}" cellspacing="0"
                             rendered="#{not empty cc.autoCompleteItems}"
                             id="autoCompleteTable" styleClass="#{resultListStyleClass}"
                             rowClasses="entry">
                    <c:set target="#{component}" property="var" value="#{cc.attrs.var}"/>
                    <composite:insertChildren/>
                    <c:if test="#{cc.childCount == 0}">
                        <cs:column>
                            <h:outputText value="#{item}"/>
                        </cs:column>
                    </c:if>
                </h:dataTable>
            </cs:htmlElement>
            <composite:renderFacet name="suggestionListFooter"/>
        </cs:htmlElement>
	</div>
        
	<h:panelGroup rendered="#{cc.attrs.display != 'read-only' and cc.attrs.display != 'disabled'}">
		<script type="text/javascript">//<![CDATA[
	jQuery(document).ready(
		function(){
			jQuery(document.getElementById("#{cc.clientId}:autoCompleteInput"))
			.csJsfAutoComplete({fireFilterActionOnKeyEnter:#{cc.attrs.fireFilterActionOnKeyEnter}
				,ignoreChars:#{cc.attrs.ignoreChars}
				,minQueryLength:#{cc.attrs.minQueryLength}
				,autoCompleteArrow:#{cc.attrs.autoCompleteArrow}
				,autoCompleteHoverClassName:"#{entryHoverStyleClass}"
				,keyupDelay:"#{cc.attrs.keyupDelay}"
				,reRender:"#{cc.attrs.reRender}"})
			.csJsfAutoComplete('init');
		}
	);//]]>
		</script>
		
		<h:panelGroup rendered="#{cc.attrs.emptyFieldValueLabel != 'null'}">
			<script type="text/javascript">//<![CDATA[
	jQuery(document).ready(function(){
		initEmptyFieldValueLabel("#{cc.clientId}:autoCompleteInput", "#{cc.attrs.emptyFieldValueLabel}", "emptyFieldValueLabel");
	});//]]>
			</script>
		</h:panelGroup>
	</h:panelGroup>
</composite:implementation>

</ui:composition>