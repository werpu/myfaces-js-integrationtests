<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:cust="http://java.sun.com/jsf/composite/components">
<h:head>
    <cust:imports/>


    <script type="text/javascript" src="../resources/scripts/testsupport.js"></script>

    <style type="text/css">
        @import "../styles/style.css";
    </style>
</h:head>
<h:body>

    <h2>integration test for testing the runtime patterns</h2>

    <div id="centerDiv">
        <h1>Testing inheritance</h1>

        <div id="testResults">
            <div id="myfaces.logging">

            </div>
        </div>
        <script type="text/javascript">
            var _Lang = myfaces._impl._util._Lang;
            var parent = function (hello) {
                myfaces._impl._util._Lang.logDebug("constructor parent");
                this.hello = hello;
            };
            parent.prototype.sayHello = function() {
                myfaces._impl._util._Lang.logDebug("calling from parent", this.hello);
            };

            _Lang.extendClass("my.child", parent, {
                constructor_: function(hello1, hello2) {
                    myfaces._impl._util._Lang.logDebug("constructor my.child");

                    this._callSuper('constructor', hello1);
                    this.hello2 = hello2;
                },
                sayHello: function() {
                    this._callSuper("sayHello");
                    myfaces._impl._util._Lang.logDebug("calling from child", this.hello2);
                }
            });

            _Lang.extendClass("my.child2", my.child, {
                constructor_: function(hello1, hello2) {
                    myfaces._impl._util._Lang.logDebug("constructor my.child2");
                    this._callSuper('constructor', hello1, hello2);
                    this.hello2 = hello2;
                },
                sayHello: function() {
                    this._callSuper();
                    myfaces._impl._util._Lang.logDebug("calling from child2", this.hello2);
                }
            });


            /*child.prototype.sayHello = function() {
             this._callSuper('sayHello');
             console.debug("calling from child", this.hello2);
             };*/

            var childInstance = new my.child("hello1", "hello2");
            childInstance.sayHello();

            var childInstance3 = new my.child2("hello2", "hello3");

            _Lang.extendClass("my.child3", childInstance3, {
                constructor_: function(hello1, hello2) {
                    myfaces._impl._util._Lang.logDebug("constructor my.child3");
                    this._callSuper('constructor', hello1, hello2);
                }
            });

            var childInstance3 = new my.child3("hello2", "hello3");

            myfaces._impl._util._UnitTest.assertTrue("Child inheritance", childInstance instanceof my.child);
            myfaces._impl._util._UnitTest.assertTrue("Child inheritance2", childInstance instanceof parent);

            myfaces._impl._util._UnitTest.assertTrue("Exists global var (defaults to true)", _Lang.exists(window, 'childInstance'));
            myfaces._impl._util._UnitTest.assertFalse("Exists no glboal var (should default to false(", _Lang.exists(window, "childInstance2"));


            myfaces._impl._util._UnitTest.assertTrue("Exists global var (defaults to true)", _Lang.exists(window, 'childInstance3'));
            myfaces._impl._util._UnitTest.assertFalse("Exists no glboal var (should default to false(", _Lang.exists(window, "childInstance2"));


            myfaces._impl._util._UnitTest.assertTrue("instanceof check", childInstance3 instanceof parent);
            myfaces._impl._util._UnitTest.assertTrue("instanceof check2", childInstance3 instanceof my.child2);

        </script>

    </div>


    <input type="button" id="chaincall" value="press for chaintest"
           onclick="jsf.util.chain(this, event, testFunc1,testFunc2,testFunc3,testFunc4);"/>

</h:body>
</html>