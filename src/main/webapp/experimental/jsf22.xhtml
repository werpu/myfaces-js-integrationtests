<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:ui="http://java.sun.com/jsf/facelets">
<ui:composition template="../templates/template.xhtml">

    <ui:define name="content">
        <h2>myfaces queuing and pps tests</h2>



        <script type="text/javascript">
            /**
             helpper function to encapsule the recurring parts
             @param source the source (same as the source of jsf.ajax request
             @param event the event which causes the trigger
             @param options the options passed down
             @param target a helper target to trigger various simulation backend servlets
             */
            function emitPPR(source, event, options, target) {
                document.getElementById("testform").action = target;
                jsf.ajax.request(/*String|Dom Node*/ source, /*|EVENT|*/ event, /*{|OPTIONS|}*/ options);
            }

            /**
             * helper for the queueing functionality
             */
            function triggerQueues(event) {
                for (var cnt = 0; cnt != 100; cnt++) {
                    emitPPR(this, event, {render:'queuesizeoutput', execute:'queuesizecontrol', op:'queuesize', myfaces:{queuesize: 5}}, './test.timeout');
                }
            }

        </script>

        <h:form id="testform" prependId="false">

            <script type="text/javascript">
                var Lang = myfaces._impl._util._Lang;
                var Logger = myfaces._impl._util._Logging;
                jsf.ajax.addOnEvent(
                        function (data) {
                            if (data.status == "timeout") {
                                Logger.logInfo("xhr timeout triggered request aborted");
                            }
                        }
                );
                jsf.ajax.addOnError(
                        function (data) {
                            Logger.logError(data.status, data.type, data.serverErrorMessage);
                        }
                );


            </script>
            <h:panelGrid columns="1">
                <h:panelGroup>
                    <h:panelGroup>
                        We have a timeout of 100 miliseconds at a request time of 3 seconds, if you press this button a timeout event
                        is generated and the request suppressed
                    </h:panelGroup>
                    <h:commandButton type="button"
                                     onclick="emitPPR(this, event, {render:'@all', execute:'@form', op:'timeout', myfaces:{timeout: 100}},'./test.timeout'); return false;"
                                     value="Press me for timeout"/>
                </h:panelGroup>

                <h:panelGroup>
                    <h:panelGroup>
                        Normal ppr cycle at at a response rate of 3000 ms
                    </h:panelGroup>
                    <h:commandButton type="button"
                                     onclick="emitPPR(this, event, {render:'@all', execute:'@form', op:'timeout'},'./test.timeout'); return false;"
                                     value="Press me for for long running request"/>
                </h:panelGroup>

                <h:panelGroup>
                    <h:panelGroup>An input at a rate of 500s, try typing fast and see the delay in action</h:panelGroup>
                    <h:inputText id="delayControl"
                                 onkeyup="emitPPR(this, event, {render:'delayoutput', execute:'delayControl', op:'delay', delay: 500},'./test.timeout'); return true;"/>

                    <h:panelGroup id="delayoutput">
                        <h:outputFormat value="number of requests will be triggered"/>
                    </h:panelGroup>
                </h:panelGroup>

                <h:panelGroup>


                    <h:panelGroup>Queue size of one, no matter how much you type only max 6 (1 active + 5 in the queue) requests will be issued</h:panelGroup>
                    <h:inputText id="queuesizecontrol"
                                 onkeyup="emitPPR(this, event, {render:'queuesizeoutput', execute:'queuesizecontrol', op:'queuesize', myfaces:{queuesize: 5}},'./test.timeout'); return true;"/>
                    <h:commandButton type="button" onclick="triggerQueues(event); return false;"
                                     value="Press me for 100 requests"/>

                    <h:panelGroup id="queuesizeoutput">
                        <h:outputFormat value="number of requests will be triggered"/>
                    </h:panelGroup>
                </h:panelGroup>


                <h:panelGroup>
                    <h:panelGroup>pps in action, only the issuing element, the pass through parms, and the viewstate is sent, the backend servlet
                        gives notification if another control is present</h:panelGroup>
                    <h:panelGrid columns="1">
                        <h:inputText id="ppsControl"
                                     onkeyup="emitPPR(this, event, {render:'ppsoutput', execute:'ppsControl', op:'pps', myfaces:{pps:true}},'./test.timeout'); return true;"
                                     value="input for pps"/>

                        <h:inputText id="ppsControl2"
                                     onkeyup="emitPPR(this, event, {render:'ppsoutput', execute:'ppsControl ppsControl2', op:'pps', myfaces:{pps:false}},'./test.timeout'); return true;"
                                     value="input for full submit"/>
                    </h:panelGrid>
                    <h:panelGroup id="ppsoutput">
                        <h:outputFormat value="PPS Output"/>
                    </h:panelGroup>


                </h:panelGroup>


                <h:panelGroup>
                    <h:panelGroup>Now with this test we set the execute on a parent panel
                        and emit a pps on it, this avoids big execute cascades (but makes the javascript code
                        in jsf.js apparently more complex)</h:panelGroup>
                    <h:panelGrid columns="1">

                        <h:panelGroup id="parpanel1">
                            <h:inputText id="ppsControl3"
                                         onkeyup="emitPPR(this, event, {render:'ppsoutput2', execute:'ppsControl3', op:'pps2', myfaces:{pps:true}},'./test.timeout'); return true;"
                                         value="input for pps"/>

                            <h:panelGroup id="parpanel2">
                                <h:inputText id="ppsControl4"
                                             onkeyup="emitPPR(this, event, {render:'ppsoutput2', execute:'parpanel1', op:'pps2', myfaces:{pps:false}},'./test.timeout'); return true;"
                                             value="input for full submit"/>
                            </h:panelGroup>
                        </h:panelGroup>
                    </h:panelGrid>
                    <h:panelGroup id="ppsoutput2">
                        <h:outputFormat value="PPS Output"/>
                    </h:panelGroup>


                </h:panelGroup>


            </h:panelGrid>
        </h:form>
    </ui:define>
</ui:composition>
</html>